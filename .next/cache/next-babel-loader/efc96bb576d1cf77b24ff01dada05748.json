{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _s = $RefreshSig$(),\n    _this = this,\n    _jsxFileName = \"/Users/14h/Documents/void/typh.us/components/canvas.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react'; // https://jsart.co/150/drawing-mandala-with-js-canvas/\n// https://gist.github.com/kodi/d927e20e2462805b35042de25fd52cff\n\nvar useWindowSize = function useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s(useWindowSize, \"Lx6dFCJt7Ze4WyzsCH5RzM+GN9Y=\");\n\nexport var Canvas = function Canvas(props) {\n  _s2();\n\n  var _windowSize$width, _windowSize$height;\n\n  var canvasRef = useRef(null);\n  var windowSize = useWindowSize();\n\n  var draw = function draw(ctx, frameCount) {\n    var width = ctx.canvas.width;\n    var height = ctx.canvas.height;\n    var center = {\n      x: width / 2,\n      y: height / 2\n    };\n    var radius = width / 2 + 180;\n    var lineColorTransparent = '#000000';\n    var slices = 70;\n\n    var _angle = 360 / slices;\n\n    var _start = 0;\n\n    var getPointOnCircle = function getPointOnCircle(deg, center, radius) {\n      var rad = (deg + frameCount) * Math.PI / 90;\n      return {\n        x: center.x + radius * Math.cos(rad),\n        y: center.y + radius * Math.sin(rad)\n      };\n    };\n\n    var lineStroke = function lineStroke(start, end, width, color) {\n      ctx.lineWidth = width;\n      ctx.beginPath();\n      ctx.strokeStyle = color;\n      ctx.moveTo(start.x, start.y); // ctx.lineTo(end.x, end.y);\n\n      ctx.bezierCurveTo(end.x, end.y, Math.random() * 10 * end.y, Math.random() * 10 * end.x, Math.random() * 10 * end.y, Math.random() * 100 * end.x);\n      ctx.stroke();\n    };\n\n    ctx.strokeStyle = lineColorTransparent;\n    ctx.beginPath();\n\n    for (var i = 0; i < slices; i++) {\n      lineStroke(center, getPointOnCircle(_start, center, radius), 1, lineColorTransparent);\n      _start += _angle;\n    }\n  };\n\n  useEffect(function () {\n    var canvas = canvasRef.current;\n    var context = canvas.getContext('2d');\n    var frameCount = 0;\n    var animationFrameId; //Our draw came here\n\n    var render = function render() {\n      if (frameCount > 450) {\n        return;\n      }\n\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return function () {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef,\n    width: \"\".concat((_windowSize$width = windowSize === null || windowSize === void 0 ? void 0 : windowSize.width) !== null && _windowSize$width !== void 0 ? _windowSize$width : 1920, \"px\"),\n    height: \"\".concat((_windowSize$height = windowSize === null || windowSize === void 0 ? void 0 : windowSize.height) !== null && _windowSize$height !== void 0 ? _windowSize$height : 1440, \"px\")\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }\n  }));\n};\n\n_s2(Canvas, \"dGRSo9fEFYv4dTGHma1e4dcwMnA=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/14h/Documents/void/typh.us/components/canvas.js"],"names":["React","useRef","useEffect","useState","useWindowSize","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Canvas","props","canvasRef","draw","ctx","frameCount","canvas","center","x","y","radius","lineColorTransparent","slices","_angle","_start","getPointOnCircle","deg","rad","Math","PI","cos","sin","lineStroke","start","end","color","lineWidth","beginPath","strokeStyle","moveTo","bezierCurveTo","random","stroke","i","current","context","getContext","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\n\n// https://jsart.co/150/drawing-mandala-with-js-canvas/\n// https://gist.github.com/kodi/d927e20e2462805b35042de25fd52cff\n\nconst useWindowSize = () => {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // only execute all the code below in client side\n        if (typeof window !== 'undefined') {\n            // Handler to call on window resize\n            function handleResize() {\n                // Set window width/height to state\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            }\n\n            // Add event listener\n            window.addEventListener(\"resize\", handleResize);\n\n            // Call handler right away so state gets updated with initial window size\n            handleResize();\n\n            // Remove event listener on cleanup\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n};\n\nexport const Canvas = props => {\n\n    const canvasRef = useRef(null);\n    const windowSize = useWindowSize();\n\n    const draw = (ctx, frameCount) => {\n        const width = ctx.canvas.width;\n        const height = ctx.canvas.height;\n        const center = {\n            x: width / 2,\n            y: height / 2,\n        };\n        const radius = (width / 2) + 180;\n        const lineColorTransparent = '#000000'\n        const slices = 70 ;\n        let _angle = 360 / slices;\n        let _start = 0;\n\n        const getPointOnCircle = function (deg, center, radius) {\n            const rad = ((deg + frameCount) * Math.PI/90);\n\n            return {\n                x: center.x + radius * Math.cos(rad),\n                y: center.y + radius * Math.sin(rad),\n            };\n        }\n\n        const lineStroke = (start, end, width, color) => {\n            ctx.lineWidth = width;\n            ctx.beginPath();\n            ctx.strokeStyle = color;\n            ctx.moveTo(start.x, start.y);\n            // ctx.lineTo(end.x, end.y);\n            ctx.bezierCurveTo(end.x, end.y, (Math.random() * 10 * end.y), (Math.random() * 10 * end.x), (Math.random() * 10 * end.y), (Math.random() * 100 * end.x));\n            ctx.stroke();\n\n        }\n\n        ctx.strokeStyle = lineColorTransparent;\n        ctx.beginPath();\n\n        for(let i = 0; i < slices; i++ ) {\n            lineStroke(\n                center,\n                getPointOnCircle(_start, center, radius),\n                1,\n                lineColorTransparent,\n            );\n\n            _start += _angle;\n        }\n\n    }\n\n    useEffect(() => {\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        let frameCount = 0;\n        let animationFrameId;\n\n        //Our draw came here\n        const render = () => {\n            if (frameCount > 450) {\n                return;\n            }\n            frameCount++;\n            draw(context, frameCount);\n            animationFrameId = window.requestAnimationFrame(render);\n        }\n        render();\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [draw]);\n\n    return <canvas\n        ref={canvasRef}\n        width={`${windowSize?.width ?? 1920}px`}\n        height={`${windowSize?.height ?? 1440}px`}\n        {...props}\n    />;\n}\n"]},"metadata":{},"sourceType":"module"}